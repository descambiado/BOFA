
#!/usr/bin/env python3
"""
MITRE ATT&CK Framework Runner
Automated Purple Team testing framework for defensive validation
Desarrollado por @descambiado para BOFA
"""

import json
import sys
import subprocess
import time
import random
from datetime import datetime

def print_banner():
    banner = """
╔══════════════════════════════════════════════════════════════════╗
║                    MITRE ATT&CK RUNNER                          ║
║              Purple Team Defensive Validation                   ║
╚══════════════════════════════════════════════════════════════════╝
"""
    print(banner)

class MitreAttackRunner:
    def __init__(self):
        self.techniques = {
            "T1003": {
                "name": "OS Credential Dumping",
                "tactic": "Credential Access",
                "description": "Simulates credential extraction attempts",
                "simulation": self.simulate_credential_dumping
            },
            "T1055": {
                "name": "Process Injection",
                "tactic": "Privilege Escalation",
                "description": "Simulates process injection techniques",
                "simulation": self.simulate_process_injection
            },
            "T1087": {
                "name": "Account Discovery",
                "tactic": "Discovery",
                "description": "Simulates user account enumeration",
                "simulation": self.simulate_account_discovery
            },
            "T1082": {
                "name": "System Information Discovery",
                "tactic": "Discovery",
                "description": "Simulates system reconnaissance",
                "simulation": self.simulate_system_discovery
            },
            "T1083": {
                "name": "File and Directory Discovery",
                "tactic": "Discovery",
                "description": "Simulates file system enumeration",
                "simulation": self.simulate_file_discovery
            },
            "T1059": {
                "name": "Command and Scripting Interpreter",
                "tactic": "Execution",
                "description": "Simulates command execution",
                "simulation": self.simulate_command_execution
            }
        }
        
        self.results = []
        
    def simulate_credential_dumping(self):
        """Simula T1003 - OS Credential Dumping"""
        print("    [*] Simulando extracción de credenciales...")
        
        # Simular acceso a archivos de credenciales
        credential_files = [
            "/etc/passwd",
            "/etc/shadow", 
            "/etc/group",
            "C:\\Windows\\System32\\config\\SAM",
            "C:\\Windows\\System32\\config\\SECURITY"
        ]
        
        detected_activities = []
        for cred_file in credential_files[:3]:  # Limitar para demo
            try:
                # Intento de lectura (seguro)
                result = subprocess.run(['ls', '-la', cred_file], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    detected_activities.append(f"File access attempt: {cred_file}")
                    print(f"      - Acceso detectado: {cred_file}")
                time.sleep(0.5)
            except:
                detected_activities.append(f"Failed access: {cred_file}")
        
        return {
            "status": "completed",
            "detections": detected_activities,
            "recommendations": [
                "Monitor file access to credential stores",
                "Implement file integrity monitoring",
                "Enable credential protection features"
            ]
        }
    
    def simulate_process_injection(self):
        """Simula T1055 - Process Injection"""
        print("    [*] Simulando inyección de procesos...")
        
        # Simular enumeración de procesos
        try:
            result = subprocess.run(['ps', 'aux'], capture_output=True, text=True, timeout=10)
            process_count = len(result.stdout.split('\n')) if result.returncode == 0 else 0
            
            detected_activities = [
                f"Process enumeration executed ({process_count} processes found)",
                "Suspicious process scanning behavior",
                "Potential injection target identification"
            ]
            
            print(f"      - Procesos enumerados: {process_count}")
            print("      - Comportamiento de inyección simulado")
            
        except Exception as e:
            detected_activities = [f"Process injection simulation error: {str(e)}"]
        
        return {
            "status": "completed",
            "detections": detected_activities,
            "recommendations": [
                "Monitor process creation and injection APIs",
                "Implement process integrity validation",
                "Enable advanced threat protection"
            ]
        }
    
    def simulate_account_discovery(self):
        """Simula T1087 - Account Discovery"""
        print("    [*] Simulando descubrimiento de cuentas...")
        
        discovery_commands = [
            ['whoami'],
            ['id'],
            ['groups'],
            ['cat', '/etc/passwd']
        ]
        
        detected_activities = []
        for cmd in discovery_commands:
            try:
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    detected_activities.append(f"Account discovery command: {' '.join(cmd)}")
                    print(f"      - Comando ejecutado: {' '.join(cmd)}")
                time.sleep(0.3)
            except:
                detected_activities.append(f"Failed command: {' '.join(cmd)}")
        
        return {
            "status": "completed",
            "detections": detected_activities,
            "recommendations": [
                "Monitor account enumeration commands",
                "Log suspicious user information queries",
                "Implement command auditing"
            ]
        }
    
    def simulate_system_discovery(self):
        """Simula T1082 - System Information Discovery"""
        print("    [*] Simulando descubrimiento del sistema...")
        
        system_commands = [
            ['uname', '-a'],
            ['hostname'],
            ['cat', '/proc/version'],
            ['lscpu']
        ]
        
        detected_activities = []
        for cmd in system_commands:
            try:
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    detected_activities.append(f"System discovery: {' '.join(cmd)}")
                    print(f"      - Información del sistema: {' '.join(cmd)}")
                time.sleep(0.2)
            except:
                detected_activities.append(f"Failed system query: {' '.join(cmd)}")
        
        return {
            "status": "completed",
            "detections": detected_activities,
            "recommendations": [
                "Monitor system information queries",
                "Log reconnaissance commands",
                "Implement behavioral analysis"
            ]
        }
    
    def simulate_file_discovery(self):
        """Simula T1083 - File and Directory Discovery"""
        print("    [*] Simulando descubrimiento de archivos...")
        
        discovery_paths = ['/etc', '/var', '/tmp', '/home']
        detected_activities = []
        
        for path in discovery_paths[:2]:  # Limitar para demo
            try:
                result = subprocess.run(['ls', '-la', path], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    detected_activities.append(f"Directory enumeration: {path}")
                    print(f"      - Directorio enumerado: {path}")
                time.sleep(0.3)
            except:
                detected_activities.append(f"Failed directory access: {path}")
        
        return {
            "status": "completed",
            "detections": detected_activities,
            "recommendations": [
                "Monitor file system enumeration",
                "Implement directory access logging",
                "Use file access monitoring tools"
            ]
        }
    
    def simulate_command_execution(self):
        """Simula T1059 - Command and Scripting Interpreter"""
        print("    [*] Simulando ejecución de comandos...")
        
        test_commands = [
            ['echo', 'MITRE_ATT&CK_TEST'],
            ['pwd'],
            ['date'],
            ['env']
        ]
        
        detected_activities = []
        for cmd in test_commands:
            try:
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    detected_activities.append(f"Command execution: {' '.join(cmd)}")
                    print(f"      - Comando ejecutado: {' '.join(cmd)}")
                time.sleep(0.2)
            except:
                detected_activities.append(f"Failed command: {' '.join(cmd)}")
        
        return {
            "status": "completed",
            "detections": detected_activities,
            "recommendations": [
                "Monitor command line execution",
                "Implement process monitoring",
                "Log interpreter usage"
            ]
        }
    
    def run_technique(self, technique_id):
        """Ejecuta una técnica específica"""
        if technique_id not in self.techniques:
            return {"status": "error", "message": f"Técnica {technique_id} no encontrada"}
        
        technique = self.techniques[technique_id]
        print(f"\n[+] Ejecutando {technique_id}: {technique['name']}")
        print(f"    Táctica: {technique['tactic']}")
        print(f"    Descripción: {technique['description']}")
        
        start_time = datetime.now()
        result = technique['simulation']()
        end_time = datetime.now()
        
        result.update({
            "technique_id": technique_id,
            "technique_name": technique['name'],
            "tactic": technique['tactic'],
            "start_time": start_time.isoformat(),
            "end_time": end_time.isoformat(),
            "duration": str(end_time - start_time)
        })
        
        self.results.append(result)
        return result
    
    def run_all_techniques(self):
        """Ejecuta todas las técnicas disponibles"""
        print(f"[+] Ejecutando {len(self.techniques)} técnicas MITRE ATT&CK...")
        
        for technique_id in self.techniques.keys():
            self.run_technique(technique_id)
            time.sleep(1)  # Pausa entre técnicas
        
        self.generate_report()
    
    def generate_report(self):
        """Genera reporte detallado de la ejecución"""
        print("\n" + "="*70)
        print("                    REPORTE MITRE ATT&CK")
        print("="*70)
        
        print(f"\n[+] Técnicas ejecutadas: {len(self.results)}")
        print(f"[+] Timestamp: {datetime.now().isoformat()}")
        
        tactics_summary = {}
        total_detections = 0
        
        for result in self.results:
            tactic = result['tactic']
            if tactic not in tactics_summary:
                tactics_summary[tactic] = 0
            tactics_summary[tactic] += 1
            total_detections += len(result.get('detections', []))
        
        print(f"\n[+] Resumen por táctica:")
        for tactic, count in tactics_summary.items():
            print(f"    - {tactic}: {count} técnicas")
        
        print(f"\n[+] Total de actividades detectables: {total_detections}")
        
        print(f"\n[+] Detalle por técnica:")
        for result in self.results:
            print(f"\n    {result['technique_id']}: {result['technique_name']}")
            print(f"    Status: {result['status']}")
            print(f"    Duración: {result['duration']}")
            print(f"    Detecciones: {len(result.get('detections', []))}")
            
            if result.get('detections'):
                for detection in result['detections'][:3]:  # Mostrar primeras 3
                    print(f"      - {detection}")
        
        # Recomendaciones generales
        print(f"\n[+] Recomendaciones de defensa:")
        all_recommendations = set()
        for result in self.results:
            for rec in result.get('recommendations', []):
                all_recommendations.add(rec)
        
        for i, rec in enumerate(sorted(all_recommendations)[:10], 1):
            print(f"    {i}. {rec}")
        
        # Guardar reporte JSON
        report_file = f"mitre_attack_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        try:
            with open(report_file, 'w') as f:
                json.dump({
                    'execution_summary': {
                        'total_techniques': len(self.results),
                        'total_detections': total_detections,
                        'tactics_summary': tactics_summary,
                        'timestamp': datetime.now().isoformat()
                    },
                    'technique_results': self.results
                }, f, indent=2)
            print(f"\n[+] Reporte guardado en: {report_file}")
        except Exception as e:
            print(f"\n[-] Error guardando reporte: {str(e)}")

def main():
    if len(sys.argv) > 1:
        if sys.argv[1] in ['-h', '--help']:
            print("MITRE ATT&CK Runner - Purple Team Testing Framework")
            print("\nUso:")
            print("  python3 mitre_attack_runner.py              # Ejecutar todas las técnicas")
            print("  python3 mitre_attack_runner.py <ID>         # Ejecutar técnica específica")
            print("  python3 mitre_attack_runner.py --list       # Listar técnicas disponibles")
            print("\nTécnicas disponibles:")
            runner = MitreAttackRunner()
            for tid, tech in runner.techniques.items():
                print(f"  {tid}: {tech['name']} ({tech['tactic']})")
            return
        elif sys.argv[1] == '--list':
            runner = MitreAttackRunner()
            print("Técnicas MITRE ATT&CK disponibles:")
            for tid, tech in runner.techniques.items():
                print(f"  {tid}: {tech['name']}")
                print(f"    Táctica: {tech['tactic']}")
                print(f"    Descripción: {tech['description']}\n")
            return
        elif sys.argv[1].startswith('T'):
            # Ejecutar técnica específica
            technique_id = sys.argv[1]
            runner = MitreAttackRunner()
            print_banner()
            result = runner.run_technique(technique_id)
            if result['status'] == 'error':
                print(f"[-] {result['message']}")
            else:
                print(f"\n[+] Técnica {technique_id} completada exitosamente")
            return
    
    # Ejecutar todas las técnicas
    print_banner()
    runner = MitreAttackRunner()
    runner.run_all_techniques()

if __name__ == "__main__":
    main()
