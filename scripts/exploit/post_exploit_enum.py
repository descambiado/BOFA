
#!/usr/bin/env python3
"""
Post-Exploitation Enumeration Tool
Advanced system enumeration for post-compromise assessment
Desarrollado por @descambiado para BOFA
"""

import os
import sys
import subprocess
import platform
import socket
import json
from datetime import datetime

def print_banner():
    banner = """
╔══════════════════════════════════════════════════════════════════╗
║                 POST-EXPLOITATION ENUMERATION                   ║
║              Advanced System Information Gathering              ║
╚══════════════════════════════════════════════════════════════════╝
"""
    print(banner)

def get_system_info():
    """Recopila información básica del sistema"""
    info = {
        "timestamp": datetime.now().isoformat(),
        "hostname": socket.gethostname(),
        "platform": platform.platform(),
        "architecture": platform.architecture(),
        "processor": platform.processor(),
        "python_version": platform.python_version()
    }
    return info

def enumerate_users():
    """Enumera usuarios del sistema"""
    users = []
    try:
        if os.name == 'nt':  # Windows
            result = subprocess.run(['net', 'user'], capture_output=True, text=True)
            if result.returncode == 0:
                users = result.stdout.split('\n')
        else:  # Unix/Linux
            with open('/etc/passwd', 'r') as f:
                for line in f:
                    if ':' in line:
                        user_info = line.strip().split(':')
                        users.append({
                            'username': user_info[0],
                            'uid': user_info[2],
                            'gid': user_info[3],
                            'home': user_info[5],
                            'shell': user_info[6]
                        })
    except Exception as e:
        users = [f"Error enumerating users: {str(e)}"]
    
    return users

def enumerate_network():
    """Enumera información de red"""
    network_info = {}
    try:
        # Interfaces de red
        result = subprocess.run(['ip', 'addr'], capture_output=True, text=True)
        if result.returncode == 0:
            network_info['interfaces'] = result.stdout
        
        # Tabla de enrutamiento
        result = subprocess.run(['ip', 'route'], capture_output=True, text=True)
        if result.returncode == 0:
            network_info['routing'] = result.stdout
            
        # Conexiones activas
        result = subprocess.run(['ss', '-tuln'], capture_output=True, text=True)
        if result.returncode == 0:
            network_info['connections'] = result.stdout
            
    except Exception as e:
        network_info['error'] = str(e)
    
    return network_info

def enumerate_processes():
    """Enumera procesos en ejecución"""
    processes = []
    try:
        result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
        if result.returncode == 0:
            lines = result.stdout.split('\n')[1:]  # Skip header
            for line in lines[:20]:  # Limit to first 20 processes
                if line.strip():
                    processes.append(line.strip())
    except Exception as e:
        processes = [f"Error enumerating processes: {str(e)}"]
    
    return processes

def check_sudo_privileges():
    """Verifica privilegios sudo"""
    try:
        result = subprocess.run(['sudo', '-l'], capture_output=True, text=True)
        return result.stdout if result.returncode == 0 else "No sudo privileges or error"
    except Exception as e:
        return f"Error checking sudo: {str(e)}"

def enumerate_files():
    """Busca archivos interesantes"""
    interesting_files = []
    search_paths = ['/etc', '/home', '/var', '/opt']
    interesting_patterns = ['*.conf', '*.key', '*.pem', '*.log']
    
    for path in search_paths:
        if os.path.exists(path):
            try:
                for root, dirs, files in os.walk(path):
                    for file in files:
                        if any(file.endswith(pattern[1:]) for pattern in interesting_patterns):
                            full_path = os.path.join(root, file)
                            if len(interesting_files) < 50:  # Limit results
                                interesting_files.append(full_path)
                    if len(dirs) > 10:  # Limit depth
                        dirs[:] = dirs[:10]
            except PermissionError:
                continue
    
    return interesting_files

def main():
    print_banner()
    
    print("[+] Iniciando enumeración post-explotación...")
    
    # Información del sistema
    print("\n[*] Recopilando información del sistema...")
    system_info = get_system_info()
    print(f"    - Hostname: {system_info['hostname']}")
    print(f"    - Platform: {system_info['platform']}")
    print(f"    - Architecture: {system_info['architecture']}")
    
    # Usuarios
    print("\n[*] Enumerando usuarios...")
    users = enumerate_users()
    if isinstance(users, list) and len(users) > 0:
        print(f"    - Encontrados {len(users)} usuarios")
        for user in users[:5]:  # Show first 5
            if isinstance(user, dict):
                print(f"    - {user['username']} (UID: {user['uid']})")
            else:
                print(f"    - {user}")
    
    # Red
    print("\n[*] Enumerando información de red...")
    network = enumerate_network()
    if 'interfaces' in network:
        print("    - Interfaces de red obtenidas")
    if 'routing' in network:
        print("    - Tabla de enrutamiento obtenida")
    
    # Procesos
    print("\n[*] Enumerando procesos...")
    processes = enumerate_processes()
    print(f"    - Encontrados {len(processes)} procesos")
    
    # Privilegios sudo
    print("\n[*] Verificando privilegios sudo...")
    sudo_info = check_sudo_privileges()
    if "error" not in sudo_info.lower():
        print("    - Privilegios sudo detectados")
    else:
        print("    - Sin privilegios sudo")
    
    # Archivos interesantes
    print("\n[*] Buscando archivos interesantes...")
    files = enumerate_files()
    print(f"    - Encontrados {len(files)} archivos de interés")
    
    # Generar reporte
    report = {
        "system_info": system_info,
        "users": users,
        "network": network,
        "processes": processes[:10],  # Limit for report
        "sudo_privileges": sudo_info,
        "interesting_files": files[:20]  # Limit for report
    }
    
    # Guardar reporte
    report_file = f"post_exploit_enum_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    try:
        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2)
        print(f"\n[+] Reporte guardado en: {report_file}")
    except Exception as e:
        print(f"\n[-] Error guardando reporte: {str(e)}")
    
    print("\n[+] Enumeración completada")

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help']:
        print("Post-Exploitation Enumeration Tool")
        print("Usage: python3 post_exploit_enum.py")
        print("\nEste script realiza enumeración automática post-compromiso:")
        print("- Información del sistema")
        print("- Usuarios y privilegios")
        print("- Configuración de red")
        print("- Procesos activos")
        print("- Archivos de configuración")
        print("\nNOTA: Solo para uso en sistemas autorizados")
    else:
        main()
